{"version":3,"sources":["node_modules/browser-pack/_prelude.js","public/js/audio/Audio.js","public/js/audio/Tick.js","public/js/audio/Track.js","public/js/audio/audio-loader.js","public/js/index.js","public/js/utils/utils.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_audioLoader","_utils","_Track","Audio","_classCallCheck","this","tag","AudioContext","window","webkitAudioContext","audioContext","bpm","tickTime","isPlaying","buffers","tracks","defaultBuffersLoaded","defaultTracksLoaded","currentTickIndex","soundURLs","kick","snare","hat","ride","checkIfiOSdevice","_enableAudioContextForiOS","audioContextEnabled","_loadDefaultBuffers","_this","$","document","ready","btn","visibility","on","buffer","createBuffer","source","createBufferSource","start","trigger","console","log","_this2","ctx","urls","Promise","all","audioLoader","then","values","_initDefaultTracks","kickTrack","Track","setTicksFromArray","snareTrack","hatTrack","index","volume","push","scheduler","nextTickTime","currentTime","self","forEach","track","mute","trackTick","ticks","active","tickSound","tickGainNode","createGain","connect","gain","value","gainNode","setTimeout","startTime","bufferName","time","sound","destination","name","soundUrl","_this3","arguments","undefined","pan","hasOwnProperty","newTrack","error","_bpm","val","_onBpmChanged","Tick","_volume","_Tick","createStereoPanner","pannerNode","_initTicks","data","_typeof","tick","audioCtx","url","resolve","reject","xhr","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","decodedBuffer","send","testing","audio","_Audio","dat","GUI","add","onChange","Math","floor","_start","setTick","addNewTrack","test","navigator","userAgent","MSStream"],"mappings":"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","file":"app.bundle.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n * ---------------------------------------------------------------------------------------\n * Audio.js\n * ---------------------------------------------------------------------------------------\n */\n\nimport { audioLoader } from \"./audio-loader\";\nimport { checkIfiOSdevice } from \"../utils/utils\";\nimport { Track } from \"./Track\";\n\n\nexport class Audio {\n\n    constructor() {\n        this.tag = \"[Audio.js]\";\n        let AudioContext = window.AudioContext || window.webkitAudioContext;\n        this.audioContext = new AudioContext();\n        this.bpm = 120.0;\n        this.tickTime = 60.0 / this.bpm / 4.0;  // 1/16 note\n        this.isPlaying = false;\n        this.buffers = {};\n        this.tracks = [];\n        this.defaultBuffersLoaded = false;\n        this.defaultTracksLoaded = false;\n\n        this.currentTickIndex = 1;\n\n\n        this.soundURLs = {\n            kick: \"assets/audio/kick.wav\",\n            snare: \"assets/audio/snare.wav\",\n            hat: \"assets/audio/hat.wav\",\n            ride: \"assets/audio/ride.wav\"\n        };\n\n        if (checkIfiOSdevice()) {\n            this._enableAudioContextForiOS();\n        } else {\n            this.audioContextEnabled = true;\n        }\n\n        this._loadDefaultBuffers();\n    }\n\n\n    /*\n     * get bpm\n     */\n    get bpm() {\n        return this._bpm;\n    }\n\n    /*\n     * set bpm\n     */\n    set bpm(val) {\n        if (val !== this._bpm) {\n            this._bpm = val;\n            this._onBpmChanged();\n        }\n    }\n\n\n\n    _enableAudioContextForiOS() {\n        $(document).ready(() => {\n            let btn = $(\"<button/>\", {\n                visibility: \"hidden\"\n            });\n\n            btn.on(\"touchstart\", () => {\n                let buffer = this.audioContext.createBuffer(1, 1, 22050);\n                let source = this.audioContext.createBufferSource();\n                source.buffer = buffer;\n                source.start();\n            });\n\n            btn.trigger(\"touchstart\");\n\n            this.audioContextEnabled = true;\n            console.log(\"AudioContext enabled for iOS\");\n        });\n    }\n\n\n    _loadDefaultBuffers() {\n\n        let ctx = this.audioContext;\n        let urls = this.soundURLs;\n\n        Promise.all([\n            audioLoader(ctx, urls.kick),\n            audioLoader(ctx, urls.snare),\n            audioLoader(ctx, urls.hat),\n            audioLoader(ctx, urls.ride)\n        ]).then(values => {\n            this.buffers[\"kick\"] = values[0];\n            this.buffers[\"snare\"] = values[1];\n            this.buffers[\"hat\"] = values[2];\n            this.buffers[\"ride\"] = values[3];\n            this.defaultBuffersLoaded = true;\n            console.log(this.buffers);\n\n            this.defaultBuffersLoaded = true;\n            console.log(\"Default buffers loaded\");\n            this._initDefaultTracks();\n\n        });\n    }\n\n\n    _initDefaultTracks() {\n\n        if (!this.defaultBuffersLoaded) {\n            return;\n        }\n\n        this.tracks = [];\n\n        let kickTrack = new Track(this.audioContext, \"kick\", this.buffers[\"kick\"]);\n        kickTrack.setTicksFromArray([1,5,9,13]);\n        let snareTrack = new Track(this.audioContext, \"snare\", this.buffers[\"snare\"], 1, 0.1);\n        snareTrack.setTicksFromArray([5,13]);\n        let hatTrack = new Track(this.audioContext, \"hat\", this.buffers[\"hat\"], 0.85, -1);\n        // hatTrack.setTicksFromArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]);\n\n\n        hatTrack.setTicksFromArray([\n            {\n                index: 1,\n                volume: 0.9\n            },\n            {\n                index: 2,\n                volume: 0.5\n            },\n            {\n                index: 3,\n                volume: 1.2\n            },\n            {\n                index: 4,\n                volume: 0.4\n            },\n            {\n                index: 5,\n                volume: 0.9\n            },\n            {\n                index: 6,\n                volume: 0.5\n            },\n            {\n                index: 7,\n                volume: 1.2\n            },\n            {\n                index: 8,\n                volume: 0.4\n            },\n            {\n                index: 9,\n                volume: 0.9\n            },\n            {\n                index: 10,\n                volume: 0.5\n            },\n            {\n                index: 11,\n                volume: 1.2\n            },\n            {\n                index: 12,\n                volume: 0.4\n            },\n            {\n                index: 13,\n                volume: 0.9\n            },\n            {\n                index: 14,\n                volume: 0.5\n            },\n            {\n                index: 15,\n                volume: 1.2\n            },\n            {\n                index: 16,\n                volume: 0.4\n            }\n        ]);\n\n        this.tracks.push(kickTrack);\n        this.tracks.push(snareTrack);\n        this.tracks.push(hatTrack);\n\n        this.defaultTracksLoaded = true;\n        console.log(\"Default tracks loaded\");\n        console.log(this.tracks);\n\n        // this._start();\n    }\n\n\n    _onBpmChanged() {\n        this.tickTime = 60.0 / this.bpm / 4.0;  // 1/16 note\n    }\n\n\n\n    _start() {\n\n        if (!this.audioContextEnabled) {\n            console.log(\"Cannot play: AudioContext is not enabled.\");\n            return;\n        }\n\n        if (this.isPlaying) {\n            console.log(\"Cannot play: it is already playing.\");\n            return;\n        }\n\n        if (!this.defaultTracksLoaded) {\n            console.log(\"Cannot play: default tracks not loaded.\");\n            return;\n        }\n\n        this.isPlaying = true;\n        let self = this;\n        let ctx = this.audioContext;\n        let startTime = ctx.currentTime;\n        let nextTickTime = startTime + self.tickTime;\n        let index = 1;\n\n        function scheduler() {\n\n            if (nextTickTime <= ctx.currentTime + self.tickTime ) {\n            // if (nextTickTime <= ctx.currentTime + 0.05 ) {\n\n                self.tracks.forEach(track => {\n\n                    if (track.mute) {\n                        return;\n                    }\n\n                    if (!track.buffer) {\n                        return;\n                    }\n\n                    // let trackVolumeNode = ctx.createGain();\n                    // trackVolumeNode.gain.value = track.volume;\n                    // let pannerNode = ctx.createStereoPanner();\n                    // pannerNode.pan.value = track.pan;\n                    //\n                    // trackVolumeNode.connect(pannerNode);\n                    // pannerNode.connect(ctx.destination);\n\n\n                    let trackTick = track.ticks[index];\n\n                    if (!trackTick.active) {\n                        return;\n                    }\n\n                    let tickSound = ctx.createBufferSource();\n                    tickSound.buffer = track.buffer;\n                    let tickGainNode = ctx.createGain();\n                    tickSound.connect(tickGainNode);\n                    tickGainNode.gain.value = trackTick.volume;\n                    tickGainNode.connect(track.gainNode);\n                    tickSound.start(nextTickTime);\n\n\n\n\n\n                    // track.ticks.forEach(tick => {\n                    //     if (tick.index !== index) {\n                    //         return;\n                    //     }\n                    //\n                    //     let tickSound = ctx.createBufferSource();\n                    //     tickSound.buffer = track.buffer;\n                    //     let tickVolumeNode = ctx.createGain();\n                    //     tickVolumeNode.gain.value = tick.volume;\n                    //     tickVolumeNode.connect(trackVolumeNode);\n                    //     tickSound.connect(tickVolumeNode);\n                    //     tickSound.start(nextTickTime);\n                    //\n                    // });\n\n                });\n\n\n                self.currentTickIndex = index;\n                console.log(\"Tick \" + self.currentTickIndex);\n                nextTickTime += self.tickTime;\n\n                index += 1;\n                index = index > 16 ? 1 : index;\n\n            }\n\n            window.setTimeout(scheduler, 0);\n        }\n\n        scheduler();\n    }\n\n\n\n\n\n\n    _playSound(bufferName, time) {\n        let ctx = this.audioContext;\n        let sound = ctx.createBufferSource();\n        sound.buffer = this.buffers[bufferName];\n        sound.connect(ctx.destination);\n        sound.start(time);\n    }\n\n\n    addNewTrack(name, soundUrl, volume = 1.0, pan = 0) {\n\n        if (this.buffers.hasOwnProperty(name)) {\n            console.log(\"Track name collision\");\n            return;\n        }\n\n        audioLoader(this.audioContext, soundUrl).then(buffer => {\n            this.buffers[name] = buffer;\n            let newTrack = new Track(this.audioContext, name, this.buffers[name], volume, pan);\n            this.tracks.push(newTrack);\n            console.log(\"Added track \", newTrack);\n        }, error => {\n            console.log(\"ERROR\", error);\n        });\n    }\n\n\n\n\n\n\n\n\n\n}\n","/*\n * ---------------------------------------------------------------------------------------\n * Tick.js\n * ---------------------------------------------------------------------------------------\n */\n\n \"use strict\";\n\n\n export class Tick {\n\n     constructor(active = false, volume = 1.0) {\n         this.active = active;\n         this.volume = volume;\n     }\n\n     get volume() {\n         return this._volume;\n     }\n\n     set volume(val) {\n         this._volume = val > 1 ? 1.0 : val;\n     }\n\n }","/*\n * ---------------------------------------------------------------------------------------\n * Track.js\n * ---------------------------------------------------------------------------------------\n */\n\n \"use strict\";\n\n import { Tick } from \"./Tick\";\n\n\n export class Track {\n\n     constructor (audioContext, name = \"track_default\", buffer = undefined, volume = 1.0, pan = 0, mute = false ) {\n         this.name = name;\n         this.buffer = buffer;\n         this.mute = mute;\n         this.ticks = [];\n         this.gainNode = audioContext.createGain();\n         this.gainNode.gain.value = volume;\n\n         if (typeof audioContext.createStereoPanner === \"function\") {\n             this.pannerNode = audioContext.createStereoPanner();\n             this.pannerNode.pan.value = pan;\n             this.gainNode.connect(this.pannerNode);\n             this.pannerNode.connect(audioContext.destination);\n             console.log(\"Stereo panner supported\");\n         } else {\n             this.gainNode.connect(audioContext.destination);\n             console.log(\"Stereo panner not supported\");\n         }\n\n         this._initTicks();\n     }\n\n\n     // setGain(val) {\n     //     this.gainNode.gain.value = val > 1 ? 1.0 : val;\n     // }\n\n\n     // setPan(val) {\n     //     if (val < -1) {\n     //         this.pannerNode.pan.value = -1;\n     //     }\n     //     else if (val > 1) {\n     //         this.pannerNode.pan.value = 1;\n     //     }\n     //     else {\n     //         this.pannerNode.pan.value = val;\n     //     }\n     // }\n\n\n\n     /*\n      *\n      */\n     _initTicks() {\n         this.ticks = [];\n         for (let i = 0; i <= 16; ++i) {\n             this.ticks.push(new Tick());\n         }\n     }\n\n\n     setTick(index, active = true, volume = 1.0) {\n         if (index < 1 || index > 16) {\n             return;\n         }\n\n         this.ticks[index].volume = volume;\n         this.ticks[index].active = active;\n     }\n\n\n     setTicksFromArray(data) {\n         data.forEach(e => {\n\n             if (typeof e === \"object\") {\n                 if (!e.index || e.index < 1 || e.index > 16) {\n                     return;\n                 }\n\n                 let tick = this.ticks[e.index];\n                 tick.volume = e.volume ? e.volume : 1.0;\n                 tick.active = e.active ? e.active : true;\n             }\n             else {\n                 this.ticks[e].active = true;\n             }\n\n         });\n     }\n\n\n }","/*\n * ---------------------------------------------------------------------------------------\n * audio-loader.js\n * ---------------------------------------------------------------------------------------\n */\n\n \"use strict\";\n\n\nexport function audioLoader(audioCtx, url) {\n\n    return new Promise((resolve, reject) => {\n\n        if (!audioCtx) {\n            reject(\"Missing audio context parameter.\");\n            return;\n        }\n\n        if (!url) {\n            reject(\"Missing url parameter\");\n            return;\n        }\n\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", url);\n        xhr.responseType = \"arraybuffer\";\n\n        xhr.onload = function() {\n            try {\n                audioCtx.decodeAudioData(xhr.response, function(decodedBuffer) {\n                    resolve(decodedBuffer);\n                });\n            } catch (e) {\n                reject(e);\n            }\n        };\n\n        xhr.send();\n    });\n}\n","/*\n * ---------------------------------------------------------------------------------------\n * index.js\n * ---------------------------------------------------------------------------------------\n */\n\n \"use strict\";\n\nimport { Audio } from \"./audio/Audio\";\n\n\n\n\n\nfunction checkiOS() {\n    return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n}\n\n\nfunction initWebAudioCtxForIOS() {\n    let AudioContext = window.AudioContext || window.webkitAudioContext;\n    let _ctx = new AudioContext();\n    let buffer = _ctx.createBuffer(1, 1, 22050);\n    let source = _ctx.createBufferSource();\n    source.buffer = buffer;\n    source.start();\n    // _contextEnabled = true;\n    // console.log('AudioContext enabled', _contextEnabled);\n}\n\n\n\n\n\nfunction init() {\n\n    let isiOSDevice = checkiOS();\n\n    if (isiOSDevice) {\n        $(\"#iOS\").css({\n            visibility: \"visible\"\n        });\n\n\n        $(document).ready(() => {\n\n            $(\"#enableAudioBtn\").on(\"touchstart\", () => {\n\n                console.log(\"Touchstart trigger\");\n\n                initWebAudioCtxForIOS();\n\n                $(\"#iOS\").css({\n                    visibility: \"hidden\"\n                });\n\n                testing();\n\n            });\n\n            $(\"#enableAudioBtn\").trigger(\"touchstart\");\n\n        });\n\n\n\n    } else {\n        testing();\n    }\n\n\n\n\n}\n\n\n\n\n\n\nfunction testing() {\n\n    let audio = new Audio();\n\n    let gui = new dat.GUI();\n    let bpmController = gui.add(audio, \"bpm\", 60.0, 180.0);\n\n    bpmController.onChange(value => {\n        audio.bpm = Math.floor(audio.bpm);\n    });\n\n    $(\"#startBtn\").on(\"click\", () => {\n        audio._start();\n    });\n\n    $(\"#btn\").on(\"click\", () => {\n\n        let hatTrack = audio.tracks[0];\n        hatTrack.setTick(2);\n\n        audio.addNewTrack(\"tom-elektro\", \"./assets/audio/tom-elektro.wav\", 3);\n\n    });\n\n    $(\"#muteBtn\").on(\"click\", () => {\n\n        let hatTrack = audio.tracks[0];\n        hatTrack.mute = !hatTrack.mute;\n\n    });\n\n}\n\n\n\n// init();\n\n\ntesting();\n\n\n\n\n","/*\n * ---------------------------------------------------------------------------------------\n * utils.js\n * ---------------------------------------------------------------------------------------\n */\n\n \"use strict\";\n\n\n /*\n  * checkIfiOSdevice\n  */\n export function checkIfiOSdevice() {\n     return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n }"]}